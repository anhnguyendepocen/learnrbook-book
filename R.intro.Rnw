\chapter{Introduction}\label{chap:introduction}

\dictum[R. P. Boas (1081) Can we make mathematics intelligible?, \emph{American Mathematical Monthly} \textbf{88:} 727-731.]{"Suppose that you want to teach the 'cat' concept to a very young child. Do you explain that a cat is a relatively small, primarily carnivorous mammal with retractible claws, a distinctive sonic output, etc.? I'll bet not. You probably show the kid a lot of different cats, saying 'kitty' each time, until it gets the idea. To put it more generally, generalizations are best made by abstraction from experience."}

%\dictum[Ursula K. Le Guin\\ \textit{Buffalo Gals and other Animal Presences}, 1985]{Although I whined and tried to hide under the rug, my inexorable publisher demanded an introduction\ldots}\vskip2ex

\section{R}

\R is a computer language designed for data analysis, but is powerful and extensible. The language is not defined by a formal grammar, and started as a free and open-source implementation of the S-language. There are some differences between S and R, but these are not major ones. Originally S and S-Plus where the dominant dialect, but nowadays R is the reference for most new extension packages.

R is a language definition, and consequently, different implementations exist, although the original one, called R, is overwhelming the most popular at the time of writing. Microsoft has released a Microsoft R, earlier called ROO, but this is not a new implementation, but instead a rather small revision of the open source R code. The R system is written in the C language, and some attempts at translating the code into C++ have been done, and released.

\begin{explainbox}
\textbf{Interpreters and compilers}\index{compiler}\index{interpreter}\index{byte compiler} Computer programs and scripts are nowadays almost always written in a high level language that is readable to humans, and that relies on a grammar much more complex than that understood by the hardware processor chip in the computer or device. Consequently one or more translation steps are needed. An interpreter, translates user code at the time of execution, and consequently parts of the code that are executed repeatedly are translated multiple times. A native compiler translates the user code into machine code in a separate step, and the compiled machine code can be stored and executed itself as many times as needed. On the other hand, compiled code can be executed only on a given hardware (processor, or processors from a given family). A byte-code compiler, translates user code into an intermediate representation, which cannot be directly executed by any hardware, and which is independent of the hardware architecture, but easier/faster to translate into machine code.
\end{explainbox}

R\index{R!design} was initially designed for interactive use in teaching, the R system uses an interpreter instead of a compiler. This adds flexibility, but results in slower execution than for compiled languages. Nowadays, byte compiling is part of the R system, and used by default in some situations or under user control. Just-in-time compiling is a relatively new feature in R, and consists in compiling on-the-fly code that is repeatedly evaluated within a single run of a script. Compiled functions can be called from within R, but not written in the R language itself. It is common to call from within R code, compiled functions or use whole libraries coded in languages such a C, C++ and FORTRAN when maximum execution speed is needed. This is normally done through package, and invisible to the user. Functions and libraries written in other interpreted and/or byte-compiled languages like Java and Python can also be called from R.

In addition, R exposes a programming interface (API) and can be called from within programs or scripts written in other languages such a Python and Java, also database systems and work sheets. This flexibility is one of the reasons of R's popularity.

\section{R's built-in help}

To\index{R!help} access help pages through the command prompt we use function \texttt{help()} or a question mark. Every object exported by an R package (functions, methods, classes, data) is documented. Sometimes a single help page documents several R objects. Usually at the end of the help pages some us examples are given.

<<help-1, eval=FALSE>>=
help("sum")
?sum
@

\section{Obtaining help from on-line forums}

Netiquette

StackOverflow

\section{Online webbinars and courses}

\section{R, editors and IDEs}

\section{Packages and repositories}

\section{Other tools}
