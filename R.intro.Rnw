\chapter{Introduction}\label{chap:introduction}

\dictum[Ursula K. le Guin]{The creative adult is the child who has survived.}\vskip2ex

\section{R}

\langname{R} is a computer language designed for data analysis, but is powerful and extensible. The language is not defined by a formal grammar, and it started as a free and open-source implementation of the S-language \autocite{Becker1984,Becker1988}. There are some differences between S and R, but these are not major ones. Originally \pgrmname{S} and later \pgrmname{S-Plus} where the dominant dialects, but nowadays \pgrmname{R} is the reference for most new extension packages.

\langname{R} is a language, and consequently, different implementations exist, although the original one, called \pgrmname{R}, is by far the most popular at the time of writing. Microsoft has released a \pgrmname{Microsoft R}, earlier called \pgrmname{ROO}, but this is not a new implementation, but instead a rather small revision of the open source \pgrmname{R} code. The \pgrmname{R} system is written in the \langname{C} language, and some attempts at translating the code into \langname{C++} have been done, and released.

\begin{explainbox}
\textbf{Interpreters and compilers}\index{compiler}\index{interpreter}\index{byte compiler} Computer programs and scripts are nowadays almost always written in a high level language that is readable to humans, and that relies on a grammar much more complex than that understood by the hardware processor chip in the computer or device. Consequently one or more translation steps are needed. An interpreter, translates user code at the time of execution, and consequently parts of the code that are executed repeatedly are translated multiple times. A native compiler translates the user code into machine code in a separate step, and the compiled machine code can be stored and executed itself as many times as needed. On the other hand, compiled code can be executed only on a given hardware (processor, or processors from a given family). A byte-code compiler, translates user code into an intermediate representation, which cannot be directly executed by any hardware, and which is independent of the hardware architecture, but easier/faster to translate into machine code. This second interpreter is called a ``virtual machine'', as it is not dependent on a real hardware processor architecture.
\end{explainbox}

\pgrmname{R}\index{R!design} was initially designed for interactive use in teaching, the \pgrmname{R} system uses an interpreter instead of a compiler. This adds flexibility and interactive use, but results in slower execution than for compiled languages. Nowadays, byte compiling is part of the \pgrmname{R} system, and used by default in some situations or under user control. Just-in-time (JIT) compiling is a relatively new feature in \pgrmname{R}, and consists in compiling on-the-fly code that is repeatedly evaluated within a single run of a script.

Functions or subroutines that have been compiled to machine code can be called from within \pgrmname{R}, but currently not written in the \langname{R} language itself, as no native compiler exists. It is common to call from within \pgrmname{R}, compiled functions or use whole libraries coded in languages such a \langname{C}, \langname{C++} and \langname{FORTRAN} when maximum execution speed is needed. This is normally done through an \pgrmname{R} package, and how the function is implemented remains invisible to the user. Functions and libraries written in other interpreted and/or byte-compiled languages like \langname{Java} and \langname{Python} can also be called from \pgrmname{R}.

In addition, \pgrmname{R} exposes a programming interface (API) and many \pgrmname{R} functions can be called from within programs or scripts written in other languages such a \langname{Python} and \langname{Java}, also database systems and work sheets. This flexibility is one of the reasons behind \pgrmname{R}'s popularity.

\section{R's built-in help}

To\index{R!help} access help pages through the command prompt we use function \texttt{help()} or a question mark. Every object exported by an R package (functions, methods, classes, data) is documented. Sometimes a single help page documents several R objects. Usually at the end of the help pages some us examples are given.

<<help-1, eval=FALSE>>=
help("sum")
?sum
@

\begin{playground}
Look at help for some other functions like \code{mean()}, \code{var()}, \code{plot()} and, why not, \code{help()} itself!
\end{playground}

In addition to help pages, the \pgrmname{R}'s distribution includes useful manuals as PDF or HTML files. This can be accessed most easily through the Help menu in \pgrmname{RStudio} or \pgrmname{RGUI}. Extension packages, provide help pages for the functions and data they make available. When a package is loaded into an \pgrmname{R} session, its help pages are added to the native help of \pgrmname{R}. In addition to these individual help pages, each package, provides an index of its corresponding help pages, for users to browse. Many packages, also provide \emph{vignettes} such as User Guides or articles describing the algorithms used.

\section{Obtaining help from on-line forums}

\subsection{Netiquette}
In\index{netiquette}\index{network etiquette} most internet forums, a certain behaviour is expected from those asking and answering questions. Some types of miss-behavior, like use of offensive or inappropriate language, will usually result in the user being banned writing rights in a forum. Occasional minor miss-behaviour, will usually result in the original question not being answered and instead the problem highlighted in the reply.

\begin{itemize}
  \item Do your homework: first search for existing answers to your question, both on-line and in the documentation. (Do mention that you attempted this without success when you post your question.)
  \item Provide a clear explanation of the problem, and all the relevant information. Say if it concerns R, the version, operating system, and any packages loaded and their versions.
  \item If at all possible provide a simplified and short, but self-contained, code example that exemplifies the problem.
  \item Be polite.
  \item Contribute to the forum by answering other users' questions when you know the answer.
\end{itemize}

\subsection{StackOverflow}

Nowadays, StackOverflow (\url{http://stackoverflow.com/})\index{StackOverflow} is the best questions and answers support site for \pgrmname{R}. In most cases, searching for existing questions and their answers, will be all what you need to do. If asking a question, make sure that it is really a new question. If there is some question that looks similar, make clear how your question is different.

StackOverflow has a user-rights system based on reputation, and questions and answers can be up- and down-voted. Those with the most up-votes are listed at the top of searches. If the questions or answers you write are up-voted after you accumulate enough reputation you acquire badges, and rights, such as editing other users' questions and answers or later on, even deleting wrong answers or off-topic questions from the system. This sounds complicated, but works extremely well at ensuring that the base of questions and answers is relevant and correct, without relying on a single or ad-hoc \emph{moderators}.

\subsection{Packages and repositories}


\section{R, editors and IDEs}

For\index{IDE for R}\index{editor for R scripts} just running the examples in the handbook, you would need only to have \pgrmname{R} installed. That would be enough as long as you also have a text editor available. This is possible, but does not give a very smooth workflow for data analyses which are beyond the very simple. The next stage is to use a text editor which integrates to some extent with R, but still this is not ideal, specially for writing packages or long scripts. Currently the best option is to use the integrated development environment (IDE) called \pgrmname{RStudio}. This is an editor, but tightly integrated with R. Its advantages are especially noticeable in the case of errors and `debugging'. During the development of the packages, I use \pgrmname{RStudio} exclusively.

\subsection{RStudio}

\pgrmname{RStudio} is an intergrated development environment (IDE). The difference between an IDE and an editor is that an IDE integrates additional tools that facilitate the interaction with R. RStudio highlights the R code according to the syntax, offers auto-completion while typing, highlights invalid code on the fly. When a script is run, if an error is triggered, it automatically find the location of the error. \pgrmname{RStudio} also supports the concept of projects allowing saving of settings separately. It also integrates support for file version control (see next section).

\pgrmname{RStudio} exists in two versions with identical user interface: a desktop version and a server version. The server version can be used remotely through a web browser. It can be run in the 'cloud', for example, as an AWS instance (Amazon Web Services) quite easily and cheaply, or on one's own server hardware. \pgrmname{RStudio} is under active development, and constantly improved (visit \url{http://www.rstudio.org/} for an up-to-date description and download and installation instructions.

Two books \autocite{vanderLoo2012,Hillebrand2015} describe and teach how to use \pgrmname{RStudio} without going in depth into data analysis or statistics, however, as \pgrmname{RStudio} is under very active development new features are not described in these books. You will find tutorials and up-to-date cheat sheets at \url{http://www.rstudio.org/}.

\section{Other tools}

\subsection{Revision control: Git and Subversion}

Revision control systems\index{revision control}\index{Git}\index{Subversion} help by keeping track of the history of software development, data analysis, or even manuscript writing. They make it possible for several programmers, data analysts, authors and or editors to work on the same files in parallel and then merge their edits. They also allow easy transfer of whole `projects' between computers. \pgrmname{Git} is very popular, and Github (\url{https://github.com/}) and Bitbucket (\url{https://bitbucket.org/}) are popular hosts for \pgrmname{Git} repositories. \pgrmname{Git} itself is free software, was designed by Linus Tordvals of Linux fame, and can be also run locally, or as one's own private server, either as an AWS instance or on other hosting services, or on your own hardware.

The books `Git: Version Control for Everyone' \autocite{Somasundaram2013} and `Pragmatic Guide to Git' \autocite{Swicegood2010} are good introductions to revision control with \pgrmname{Git}. Free introductory videos and \emph{cheatsheets} are available at \url{https://git-scm.com/doc}.

\subsection{C, C++ and FORTRAN compilers}

Although\index{c@\textsf{C++}}\index{c!compiler} R is an interpreted language, a compiler may need to be installed for compiling R itself, and/or packages containing functions or libraries written in  \langname{C}, \langname{C++} or  \langname{FORTRAN}. On OS X and MS-Windows, the normal practice is to install binary packages (available already compiled from repositories such as CRAM). In other systems like Linux distributions and Unix it is the normal practice to install packages from sources, that may require compilation at the time of installation. With suitable build tools (e.g.\ \pgrmname{RTools} for MS-Windows, and X-code for OS X) source packages can be installed and developed in any of the operating systems on which R runs.

\subsection{\hologo{LaTeX}}

\hologo{LaTeX}\index{latex@\hologo{LaTeX}} is built on top of \hologo{TeX}\index{tex@\hologo{TeX}}. \hologo{TeX} code and features were `frozen' (only bugs are fixed) long ago. There are currently a few `improved' derivatives: \hologo{pdfTeX}\index{pdftex@\hologo{pdfTeX}}, \hologo{XeTeX}\index{xetex@\hologo{XeTeX}}, and \hologo{LuaTeX}\index{luatex@\hologo{LuaTeX}}. Currently the most popular \hologo{TeX} in western countries is \hologo{pdfTeX} which can directly output PDF files. \hologo{XeTeX} can handle text both written from left to right and right to left, even in the same document and supports additional font formats, and is the most popular \hologo{TeX} engine in China and other Asian countries. Both \hologo{XeLaTeX} and \hologo{LuaTeX} are rapidly becoming popular also for typesetting texts in variants of Latin and Greek alphabets as these new \hologo{TeX} engines natively support large character sets and modern font formats such as TTF (True Type) and OTF (Open Type).

\hologo{LaTeX} is needed only for building from sources packages that include documentation using this text markup language. The present handbook is written using \pgrmname {R} and \hologo{XeLaTeX}, and the source files are available from a public \pgrmname{Git} repository at Bitbucket (\url{https://bitbucket.org/aphalo/using-r}).

\subsection{Markdown}

\langname{Markdown} is a simple markup language, which although offering somehow less flexibility than \hologo{LaTeX}, it is much easier to learn and text files using this markup language, can be easily converted to various output formats such as HTML and XTML in addition to PDF. \pgrmname{RStudio} supports editing markdown and the variants \langname{R Markdown} and \langname{Bookdown}. Documentation on \langname{Rmarkdown} is available on-line at \url{http://rmarkdown.rstudio.com/} and on \langname{Bookdown} at \url{https://bookdown.org/}.


